{"ast":null,"code":"// client/src/services/tripService.js\nimport axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// Axios instance with base URL and default headers\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Attach auth token (if exists) to every request\napi.interceptors.request.use(config => {\n  try {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n  } catch (_) {\n    // ignore storage errors\n  }\n  return config;\n}, error => Promise.reject(error));\nexport const tripService = {\n  /**\n   * NEW: Plan trip using names only + mode (hike/bike)\n   * The backend (tripController) will:\n   *  - Use Groq LLM to propose intermediate waypoints with coordinates\n   *  - Geocode any missing coords via ORS\n   *  - Request a realistic route via ORS Directions (roads/trails)\n   *\n   * @param {Object} params\n   * @param {string} params.startName - e.g., \"Tel Aviv, Israel\"\n   * @param {string} params.endName   - e.g., \"Jerusalem, Israel\"\n   * @param {\"hike\"|\"bike\"} params.mode\n   * @param {number} [params.days=1]\n   * @param {string[]} [params.waypoints=[]] - array of waypoint names\n   * @param {string} [params.regionHint=\"\"]  - region hint for LLM/geocoding\n   * @returns {Promise<{success:boolean, points:any[], route:any, summary:any, daily:any[]}>}\n   */\n  async planTripNew({\n    startName,\n    endName,\n    mode,\n    days = 1,\n    waypoints = [],\n    regionHint = ''\n  }) {\n    const payload = {\n      mode,\n      start: {\n        name: startName\n      },\n      end: {\n        name: endName\n      },\n      user_waypoints: waypoints.map(n => ({\n        name: n\n      })),\n      days,\n      region_hint: regionHint\n    };\n    const response = await api.post('/trip/plan', payload);\n    // The controller returns { success, points, route, summary, daily }\n    return response.data;\n  },\n  /**\n   * (LEGACY) Old signature kept for backward compatibility.\n   * Server must support { location, tripType } if you still use this.\n   * Prefer using planTripNew(...) with the new API format.\n   */\n  async planTrip(location, tripType) {\n    const response = await api.post('/trip/plan', {\n      location,\n      tripType\n    });\n    // Old server likely returned { data: {...} }\n    return response.data.data;\n  },\n  // Weather – forecast\n  async getWeatherForecast(location, days = 3) {\n    const response = await api.get(`/weather/${encodeURIComponent(location)}`, {\n      params: {\n        days\n      }\n    });\n    return response.data.data;\n  },\n  // Weather – current conditions\n  async getCurrentWeather(location) {\n    const response = await api.get(`/weather/${encodeURIComponent(location)}/current`);\n    return response.data.data;\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","_","error","Promise","reject","tripService","planTripNew","startName","endName","mode","days","waypoints","regionHint","payload","start","name","end","user_waypoints","map","n","region_hint","response","post","data","planTrip","location","tripType","getWeatherForecast","get","encodeURIComponent","params","getCurrentWeather"],"sources":["C:/Users/Gal/Desktop/Trip/Trip/client/src/services/tripService.js"],"sourcesContent":["// client/src/services/tripService.js\nimport axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// Axios instance with base URL and default headers\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Attach auth token (if exists) to every request\napi.interceptors.request.use(\n  (config) => {\n    try {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n    } catch (_) {\n      // ignore storage errors\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\nexport const tripService = {\n  /**\n   * NEW: Plan trip using names only + mode (hike/bike)\n   * The backend (tripController) will:\n   *  - Use Groq LLM to propose intermediate waypoints with coordinates\n   *  - Geocode any missing coords via ORS\n   *  - Request a realistic route via ORS Directions (roads/trails)\n   *\n   * @param {Object} params\n   * @param {string} params.startName - e.g., \"Tel Aviv, Israel\"\n   * @param {string} params.endName   - e.g., \"Jerusalem, Israel\"\n   * @param {\"hike\"|\"bike\"} params.mode\n   * @param {number} [params.days=1]\n   * @param {string[]} [params.waypoints=[]] - array of waypoint names\n   * @param {string} [params.regionHint=\"\"]  - region hint for LLM/geocoding\n   * @returns {Promise<{success:boolean, points:any[], route:any, summary:any, daily:any[]}>}\n   */\n  async planTripNew({ startName, endName, mode, days = 1, waypoints = [], regionHint = '' }) {\n    const payload = {\n      mode,\n      start: { name: startName },\n      end:   { name: endName },\n      user_waypoints: waypoints.map((n) => ({ name: n })),\n      days,\n      region_hint: regionHint\n    };\n\n    const response = await api.post('/trip/plan', payload);\n    // The controller returns { success, points, route, summary, daily }\n    return response.data;\n  },\n\n  /**\n   * (LEGACY) Old signature kept for backward compatibility.\n   * Server must support { location, tripType } if you still use this.\n   * Prefer using planTripNew(...) with the new API format.\n   */\n  async planTrip(location, tripType) {\n    const response = await api.post('/trip/plan', {\n      location,\n      tripType,\n    });\n    // Old server likely returned { data: {...} }\n    return response.data.data;\n  },\n\n  // Weather – forecast\n  async getWeatherForecast(location, days = 3) {\n    const response = await api.get(`/weather/${encodeURIComponent(location)}`, {\n      params: { days },\n    });\n    return response.data.data;\n  },\n\n  // Weather – current conditions\n  async getCurrentWeather(location) {\n    const response = await api.get(`/weather/${encodeURIComponent(location)}/current`);\n    return response.data.data;\n  },\n};\n\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAE5E;AACA,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,OAAO;EAChBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,IAAI;IACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAE;MACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;IAClD;EACF,CAAC,CAAC,OAAOI,CAAC,EAAE;IACV;EAAA;EAEF,OAAOL,MAAM;AACf,CAAC,EACAM,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;AAED,OAAO,MAAMG,WAAW,GAAG;EACzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMC,WAAWA,CAAC;IAAEC,SAAS;IAAEC,OAAO;IAAEC,IAAI;IAAEC,IAAI,GAAG,CAAC;IAAEC,SAAS,GAAG,EAAE;IAAEC,UAAU,GAAG;EAAG,CAAC,EAAE;IACzF,MAAMC,OAAO,GAAG;MACdJ,IAAI;MACJK,KAAK,EAAE;QAAEC,IAAI,EAAER;MAAU,CAAC;MAC1BS,GAAG,EAAI;QAAED,IAAI,EAAEP;MAAQ,CAAC;MACxBS,cAAc,EAAEN,SAAS,CAACO,GAAG,CAAEC,CAAC,KAAM;QAAEJ,IAAI,EAAEI;MAAE,CAAC,CAAC,CAAC;MACnDT,IAAI;MACJU,WAAW,EAAER;IACf,CAAC;IAED,MAAMS,QAAQ,GAAG,MAAMhC,GAAG,CAACiC,IAAI,CAAC,YAAY,EAAET,OAAO,CAAC;IACtD;IACA,OAAOQ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;EACE,MAAMC,QAAQA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;IACjC,MAAML,QAAQ,GAAG,MAAMhC,GAAG,CAACiC,IAAI,CAAC,YAAY,EAAE;MAC5CG,QAAQ;MACRC;IACF,CAAC,CAAC;IACF;IACA,OAAOL,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAMI,kBAAkBA,CAACF,QAAQ,EAAEf,IAAI,GAAG,CAAC,EAAE;IAC3C,MAAMW,QAAQ,GAAG,MAAMhC,GAAG,CAACuC,GAAG,CAAC,YAAYC,kBAAkB,CAACJ,QAAQ,CAAC,EAAE,EAAE;MACzEK,MAAM,EAAE;QAAEpB;MAAK;IACjB,CAAC,CAAC;IACF,OAAOW,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAMQ,iBAAiBA,CAACN,QAAQ,EAAE;IAChC,MAAMJ,QAAQ,GAAG,MAAMhC,GAAG,CAACuC,GAAG,CAAC,YAAYC,kBAAkB,CAACJ,QAAQ,CAAC,UAAU,CAAC;IAClF,OAAOJ,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
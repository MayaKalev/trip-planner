{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// יצירת אינסטנס של axios עם הגדרות ברירת מחדל\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// הוספת טוקן אם קיים\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\nexport const tripService = {\n  /**\n   * תכנון מסלול חדש\n   * שולח מיקום עם שם, lat, lng וסוג מסלול\n   */\n  async planTrip(location, tripType) {\n    var _formData$location, _formData$location2, _formData$location3;\n    // וידוא שאנחנו שולחים את המידע כמו שהשרת מצפה\n    const payload = {\n      name: ((_formData$location = formData.location) === null || _formData$location === void 0 ? void 0 : _formData$location.name) || '',\n      lat: ((_formData$location2 = formData.location) === null || _formData$location2 === void 0 ? void 0 : _formData$location2.lat) || 0,\n      lng: ((_formData$location3 = formData.location) === null || _formData$location3 === void 0 ? void 0 : _formData$location3.lng) || 0\n    };\n    await tripService.planTrip(payload, formData.tripType);\n    const response = await api.post('/trip/plan', payload);\n    return response.data.data;\n  },\n  /**\n   * שמירת מסלול חדש במסד הנתונים\n   */\n  async createRoute(route) {\n    const response = await api.post('/trip/save', route);\n    return response.data;\n  },\n  /**\n   * קבלת תחזית מזג אוויר\n   */\n  async getWeatherForecast(location, days = 3) {\n    const response = await api.get(`/weather/${encodeURIComponent(location)}`, {\n      params: {\n        days\n      }\n    });\n    return response.data.data;\n  },\n  /**\n   * קבלת מזג אוויר נוכחי\n   */\n  async getCurrentWeather(location) {\n    const response = await api.get(`/weather/${encodeURIComponent(location)}/current`);\n    return response.data.data;\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","tripService","planTrip","location","tripType","_formData$location","_formData$location2","_formData$location3","payload","name","formData","lat","lng","response","post","data","createRoute","route","getWeatherForecast","days","get","encodeURIComponent","params","getCurrentWeather"],"sources":["C:/Users/Gal/Desktop/Trip/Trip/client/src/services/tripService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// יצירת אינסטנס של axios עם הגדרות ברירת מחדל\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// הוספת טוקן אם קיים\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\nexport const tripService = {\n  /**\n   * תכנון מסלול חדש\n   * שולח מיקום עם שם, lat, lng וסוג מסלול\n   */\n  async planTrip(location, tripType) {\n    // וידוא שאנחנו שולחים את המידע כמו שהשרת מצפה\n    const payload = {\n      name: formData.location?.name || '',\n      lat: formData.location?.lat || 0,\n      lng: formData.location?.lng || 0\n    };\n    \n    await tripService.planTrip(payload, formData.tripType);\n    \n\n    const response = await api.post('/trip/plan', payload);\n    return response.data.data;\n  },\n\n  /**\n   * שמירת מסלול חדש במסד הנתונים\n   */\n  async createRoute(route) {\n    const response = await api.post('/trip/save', route);\n    return response.data;\n  },\n\n  /**\n   * קבלת תחזית מזג אוויר\n   */\n  async getWeatherForecast(location, days = 3) {\n    const response = await api.get(`/weather/${encodeURIComponent(location)}`, {\n      params: { days },\n    });\n    return response.data.data;\n  },\n\n  /**\n   * קבלת מזג אוויר נוכחי\n   */\n  async getCurrentWeather(location) {\n    const response = await api.get(`/weather/${encodeURIComponent(location)}/current`);\n    return response.data.data;\n  },\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAE5E;AACA,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,OAAO;EAChBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;AAED,OAAO,MAAMG,WAAW,GAAG;EACzB;AACF;AACA;AACA;EACE,MAAMC,QAAQA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;IAAA,IAAAC,kBAAA,EAAAC,mBAAA,EAAAC,mBAAA;IACjC;IACA,MAAMC,OAAO,GAAG;MACdC,IAAI,EAAE,EAAAJ,kBAAA,GAAAK,QAAQ,CAACP,QAAQ,cAAAE,kBAAA,uBAAjBA,kBAAA,CAAmBI,IAAI,KAAI,EAAE;MACnCE,GAAG,EAAE,EAAAL,mBAAA,GAAAI,QAAQ,CAACP,QAAQ,cAAAG,mBAAA,uBAAjBA,mBAAA,CAAmBK,GAAG,KAAI,CAAC;MAChCC,GAAG,EAAE,EAAAL,mBAAA,GAAAG,QAAQ,CAACP,QAAQ,cAAAI,mBAAA,uBAAjBA,mBAAA,CAAmBK,GAAG,KAAI;IACjC,CAAC;IAED,MAAMX,WAAW,CAACC,QAAQ,CAACM,OAAO,EAAEE,QAAQ,CAACN,QAAQ,CAAC;IAGtD,MAAMS,QAAQ,GAAG,MAAM3B,GAAG,CAAC4B,IAAI,CAAC,YAAY,EAAEN,OAAO,CAAC;IACtD,OAAOK,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;AACF;AACA;EACE,MAAMC,WAAWA,CAACC,KAAK,EAAE;IACvB,MAAMJ,QAAQ,GAAG,MAAM3B,GAAG,CAAC4B,IAAI,CAAC,YAAY,EAAEG,KAAK,CAAC;IACpD,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;AACF;AACA;EACE,MAAMG,kBAAkBA,CAACf,QAAQ,EAAEgB,IAAI,GAAG,CAAC,EAAE;IAC3C,MAAMN,QAAQ,GAAG,MAAM3B,GAAG,CAACkC,GAAG,CAAC,YAAYC,kBAAkB,CAAClB,QAAQ,CAAC,EAAE,EAAE;MACzEmB,MAAM,EAAE;QAAEH;MAAK;IACjB,CAAC,CAAC;IACF,OAAON,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;AACF;AACA;EACE,MAAMQ,iBAAiBA,CAACpB,QAAQ,EAAE;IAChC,MAAMU,QAAQ,GAAG,MAAM3B,GAAG,CAACkC,GAAG,CAAC,YAAYC,kBAAkB,CAAClB,QAAQ,CAAC,UAAU,CAAC;IAClF,OAAOU,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
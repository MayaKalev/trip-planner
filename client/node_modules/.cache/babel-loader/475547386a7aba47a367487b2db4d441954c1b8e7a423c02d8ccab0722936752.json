{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests if available\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Handle token expiration\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const authService = {\n  // Register new user\n  async register(name, email, password) {\n    const response = await api.post('/auth/register', {\n      name,\n      email,\n      password\n    });\n    return response.data.data;\n  },\n  // Login user\n  async login(email, password) {\n    const response = await api.post('/auth/login', {\n      email,\n      password\n    });\n    return response.data.data;\n  },\n  // Get current user\n  async getCurrentUser() {\n    const response = await api.get('/auth/me');\n    return response.data.data.user;\n  },\n  // Update user profile\n  async updateProfile(profileData) {\n    const response = await api.put('/auth/profile', profileData);\n    return response.data.data.user;\n  },\n  // Change password\n  async changePassword(currentPassword, newPassword) {\n    const response = await api.put('/auth/password', {\n      currentPassword,\n      newPassword\n    });\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authService","register","name","email","password","post","data","login","getCurrentUser","get","user","updateProfile","profileData","put","changePassword","currentPassword","newPassword"],"sources":["/Users/ofir/dev/Trip/client/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add token to requests if available\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Handle token expiration\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const authService = {\n  // Register new user\n  async register(name, email, password) {\n    const response = await api.post('/auth/register', {\n      name,\n      email,\n      password,\n    });\n    return response.data.data;\n  },\n\n  // Login user\n  async login(email, password) {\n    const response = await api.post('/auth/login', {\n      email,\n      password,\n    });\n    return response.data.data;\n  },\n\n  // Get current user\n  async getCurrentUser() {\n    const response = await api.get('/auth/me');\n    return response.data.data.user;\n  },\n\n  // Update user profile\n  async updateProfile(profileData) {\n    const response = await api.put('/auth/profile', profileData);\n    return response.data.data.user;\n  },\n\n  // Change password\n  async changePassword(currentPassword, newPassword) {\n    const response = await api.put('/auth/password', {\n      currentPassword,\n      newPassword,\n    });\n    return response.data;\n  },\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAE5E;AACA,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,OAAO;EAChBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAZ,GAAG,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClCR,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;IAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,OAAO,MAAMU,WAAW,GAAG;EACzB;EACA,MAAMC,QAAQA,CAACC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,EAAE;IACpC,MAAMX,QAAQ,GAAG,MAAMf,GAAG,CAAC2B,IAAI,CAAC,gBAAgB,EAAE;MAChDH,IAAI;MACJC,KAAK;MACLC;IACF,CAAC,CAAC;IACF,OAAOX,QAAQ,CAACa,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAMC,KAAKA,CAACJ,KAAK,EAAEC,QAAQ,EAAE;IAC3B,MAAMX,QAAQ,GAAG,MAAMf,GAAG,CAAC2B,IAAI,CAAC,aAAa,EAAE;MAC7CF,KAAK;MACLC;IACF,CAAC,CAAC;IACF,OAAOX,QAAQ,CAACa,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAME,cAAcA,CAAA,EAAG;IACrB,MAAMf,QAAQ,GAAG,MAAMf,GAAG,CAAC+B,GAAG,CAAC,UAAU,CAAC;IAC1C,OAAOhB,QAAQ,CAACa,IAAI,CAACA,IAAI,CAACI,IAAI;EAChC,CAAC;EAED;EACA,MAAMC,aAAaA,CAACC,WAAW,EAAE;IAC/B,MAAMnB,QAAQ,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,eAAe,EAAED,WAAW,CAAC;IAC5D,OAAOnB,QAAQ,CAACa,IAAI,CAACA,IAAI,CAACI,IAAI;EAChC,CAAC;EAED;EACA,MAAMI,cAAcA,CAACC,eAAe,EAAEC,WAAW,EAAE;IACjD,MAAMvB,QAAQ,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,gBAAgB,EAAE;MAC/CE,eAAe;MACfC;IACF,CAAC,CAAC;IACF,OAAOvB,QAAQ,CAACa,IAAI;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}